import Images.ImageEditor;import general.ThreadMatch;import general.logics.AdvantageGenerator;import hltv.Hltv;import hltv.matches.Match;import hltv.matches.teams.Team;import org.apache.commons.math3.util.Precision;import telegramBot.Bot;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;public class Main {    private static double leftPerc;    private static double rightPerc;    private static List<String> lifeMatchesLinks;    static {        try {            lifeMatchesLinks = Hltv.getHltv().getLiveMatchesLinks();        } catch (Exception e) {            e.printStackTrace();        }    }    public static void main(String[] args) throws Exception {        List<String> cycleMatchesLinks = lifeMatchesLinks;        update(cycleMatchesLinks);//        List<String> links = new ArrayList<>();//        links.add("https://www.hltv.org/matches/2345349/izako-boars-vs-project-x-nine-to-five-6-dawn");//        links.add("https://www.hltv.org/matches/2345296/og-vs-geng-flashpoint-2");//        links.add("https://www.hltv.org/matches/2345356/fate-vs-espada-oga-counter-pit-by-amd-and-sapphire-season-8");//        links.add("https://www.hltv.org/matches/2345192/g2-vs-nip-iem-beijing-haidian-2020-europe");//        links.add("https://www.hltv.org/matches/2345364/hellraisers-vs-nemiga-oga-counter-pit-by-amd-and-sapphire-season-8");//        links.add("https://www.hltv.org/matches/2345366/project-x-vs-hreds-esea-advanced-season-35-europe");//        links.add("https://www.hltv.org/matches/2345197/evil-geniuses-vs-rebirth-iem-beijing-haidian-2020-north-america");//        update(links);    }    public static void update(List<String> cycleMatchesLinks) throws Exception {        for (String lifeMatchesLink : cycleMatchesLinks) {            Match match = new Match(lifeMatchesLink);            Team leftTeam;            Team rightTeam;            double[] attributes = new double[8];            Map<String, String[]> map_perWin = new LinkedHashMap<>();            StringBuilder info = new StringBuilder();            if (match.mapPick().get(0).equals("TBA")) {                ThreadMatch threadMatch = new ThreadMatch(match);                threadMatch.start();            } else {                for (String map : match.mapPick()) {                    System.out.println("\nFirst team download...");                    leftTeam = new Team(match.getFirstTeamLink(), map); // Team 0 downloading left                    System.out.println("\nSecond team download...");                    rightTeam = new Team(match.getSecondTeamLink(), map); // Team 1 downloading right                    AdvantageGenerator generator = new AdvantageGenerator(leftTeam, rightTeam);                    System.out.println("Generating attitude...");                    attributes[0] = Precision.round(generator.KDRatioAttitude(), 3);                    attributes[1] = Precision.round(generator.headshotAttitude(), 3);                    attributes[2] = Precision.round(generator.damagePerRoundAttitude(), 3);                    attributes[3] = Precision.round(generator.assistsPerRoundAttitude(), 3);                    attributes[4] = Precision.round(generator.impactAttitude(), 3);                    attributes[5] = Precision.round(generator.kastAttitude(), 3);                    attributes[6] = Precision.round(generator.openingKillRatioAttitude(), 3);                    attributes[7] = Precision.round(generator.rating3mAttitude(), 3);                    System.out.println("\nPython calling...");                    callPython(attributes);                    System.out.println("\nNext Map");                    map_perWin.put(map, new String[]{String.valueOf(getLeftPerc()), String.valueOf(getRightPerc())});                    info.append(map).append(": ").append(Arrays.toString(attributes)).append("\n");                }                ImageEditor.fillImage(match, map_perWin);                Bot.getBot().setMessage(info.toString());                Bot.getBot().sendMessage();                Bot.getBot().sendPhoto("src/main/java/Images/imageLibrary/result.png");            }        }        System.out.println("Reloading...");        reloadList();    }    //new list for comparison    private static void reloadList() throws Exception {        System.out.println("\nReloadMatches");        //new list for comparison        List<String> nextlifeMatchesLinks = Hltv.getHltv().getLiveMatchesLinks();        // удалить старые линки с нового листа        nextlifeMatchesLinks.removeAll(lifeMatchesLinks);        // если новых матчей не появилось - перезапустить метод        if (nextlifeMatchesLinks.isEmpty()) {            System.out.println("\nNo one new match. Sleep...");            Thread.sleep(30000);            reloadList();        }        //если линки появились, присвоить старому листу новые линки        else {            lifeMatchesLinks.addAll(nextlifeMatchesLinks);            update(nextlifeMatchesLinks);        }    }    private static void callPython(double[] attributes) {        String caller = "sh src/main/java/bashscript.sh "                + attributes[0] + " "                + attributes[1] + " "                + attributes[2] + " "                + attributes[3] + " "                + attributes[4] + " "                + attributes[5] + " "                + attributes[6] + " "                + attributes[7];        if (attributes[0] == 0 || attributes[0] > 2.1 || attributes[0] < 0.45) {            setLeftPerc("0.0", 1);            setRightPerc("0.0 ", 1);        } else {            ProcessBuilder processBuilder = new ProcessBuilder();            processBuilder.command("bash", "-c", caller);            try {                Process process = processBuilder.start();                StringBuilder output = new StringBuilder();                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));                String line;                while ((line = reader.readLine()) != null) {                    output.append(line).append("\n");                }                int exitVal = process.waitFor();                if (exitVal == 0) {                    System.out.println(output);                    setLeftPerc(output.toString(), 0);                    setRightPerc(output.toString(), 0);                }            } catch (IOException | InterruptedException e) {                e.printStackTrace();            }        }    }    private static void setLeftPerc(String pyOutput, int a) {        switch (a) {            case 0:                leftPerc = Double.parseDouble(pyOutput.substring(0, pyOutput.indexOf(':')));                break;            case 1:                leftPerc = Double.parseDouble(pyOutput);                break;        }    }    private static void setRightPerc(String pyOutput, int a) {        switch (a) {            case 0:                rightPerc = Double.parseDouble(pyOutput.substring(pyOutput.indexOf(':') + 1));                break;            case 1:                rightPerc = Double.parseDouble(pyOutput);                break;        }    }    private static double getLeftPerc() {        return leftPerc;    }    private static double getRightPerc() {        return rightPerc;    }}